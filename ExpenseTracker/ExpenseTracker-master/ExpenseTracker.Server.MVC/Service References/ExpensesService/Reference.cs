//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ExpenseTracker.Server.MVC.ExpensesService {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ExpensesService.ExpenseTrackerService")]
    public interface ExpenseTrackerService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ExpenseTrackerService/GetCategoryTypes", ReplyAction="http://tempuri.org/ExpenseTrackerService/GetCategoryTypesResponse")]
        ExpenseTracker.Model.CategoryType[] GetCategoryTypes();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ExpenseTrackerService/GetCategoryTypes", ReplyAction="http://tempuri.org/ExpenseTrackerService/GetCategoryTypesResponse")]
        System.Threading.Tasks.Task<ExpenseTracker.Model.CategoryType[]> GetCategoryTypesAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ExpenseTrackerService/GetCategoryTypeById", ReplyAction="http://tempuri.org/ExpenseTrackerService/GetCategoryTypeByIdResponse")]
        ExpenseTracker.Model.CategoryType GetCategoryTypeById(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ExpenseTrackerService/GetCategoryTypeById", ReplyAction="http://tempuri.org/ExpenseTrackerService/GetCategoryTypeByIdResponse")]
        System.Threading.Tasks.Task<ExpenseTracker.Model.CategoryType> GetCategoryTypeByIdAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ExpenseTrackerService/AddCategoryType", ReplyAction="http://tempuri.org/ExpenseTrackerService/AddCategoryTypeResponse")]
        void AddCategoryType(ExpenseTracker.Model.CategoryType categoryType);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ExpenseTrackerService/AddCategoryType", ReplyAction="http://tempuri.org/ExpenseTrackerService/AddCategoryTypeResponse")]
        System.Threading.Tasks.Task AddCategoryTypeAsync(ExpenseTracker.Model.CategoryType categoryType);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ExpenseTrackerService/UpdateCategoryType", ReplyAction="http://tempuri.org/ExpenseTrackerService/UpdateCategoryTypeResponse")]
        void UpdateCategoryType(ExpenseTracker.Model.CategoryType categoryType);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ExpenseTrackerService/UpdateCategoryType", ReplyAction="http://tempuri.org/ExpenseTrackerService/UpdateCategoryTypeResponse")]
        System.Threading.Tasks.Task UpdateCategoryTypeAsync(ExpenseTracker.Model.CategoryType categoryType);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ExpenseTrackerService/DeleteCategoryTypeById", ReplyAction="http://tempuri.org/ExpenseTrackerService/DeleteCategoryTypeByIdResponse")]
        void DeleteCategoryTypeById(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ExpenseTrackerService/DeleteCategoryTypeById", ReplyAction="http://tempuri.org/ExpenseTrackerService/DeleteCategoryTypeByIdResponse")]
        System.Threading.Tasks.Task DeleteCategoryTypeByIdAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ExpenseTrackerService/GetCategories", ReplyAction="http://tempuri.org/ExpenseTrackerService/GetCategoriesResponse")]
        ExpenseTracker.Model.Category[] GetCategories();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ExpenseTrackerService/GetCategories", ReplyAction="http://tempuri.org/ExpenseTrackerService/GetCategoriesResponse")]
        System.Threading.Tasks.Task<ExpenseTracker.Model.Category[]> GetCategoriesAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ExpenseTrackerService/GetCategoryById", ReplyAction="http://tempuri.org/ExpenseTrackerService/GetCategoryByIdResponse")]
        ExpenseTracker.Model.Category GetCategoryById(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ExpenseTrackerService/GetCategoryById", ReplyAction="http://tempuri.org/ExpenseTrackerService/GetCategoryByIdResponse")]
        System.Threading.Tasks.Task<ExpenseTracker.Model.Category> GetCategoryByIdAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ExpenseTrackerService/AddCategory", ReplyAction="http://tempuri.org/ExpenseTrackerService/AddCategoryResponse")]
        void AddCategory(ExpenseTracker.Model.Category category);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ExpenseTrackerService/AddCategory", ReplyAction="http://tempuri.org/ExpenseTrackerService/AddCategoryResponse")]
        System.Threading.Tasks.Task AddCategoryAsync(ExpenseTracker.Model.Category category);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ExpenseTrackerService/UpdateCategory", ReplyAction="http://tempuri.org/ExpenseTrackerService/UpdateCategoryResponse")]
        void UpdateCategory(ExpenseTracker.Model.Category category);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ExpenseTrackerService/UpdateCategory", ReplyAction="http://tempuri.org/ExpenseTrackerService/UpdateCategoryResponse")]
        System.Threading.Tasks.Task UpdateCategoryAsync(ExpenseTracker.Model.Category category);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ExpenseTrackerService/DeleteCategoryById", ReplyAction="http://tempuri.org/ExpenseTrackerService/DeleteCategoryByIdResponse")]
        void DeleteCategoryById(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ExpenseTrackerService/DeleteCategoryById", ReplyAction="http://tempuri.org/ExpenseTrackerService/DeleteCategoryByIdResponse")]
        System.Threading.Tasks.Task DeleteCategoryByIdAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ExpenseTrackerService/GetTransactions", ReplyAction="http://tempuri.org/ExpenseTrackerService/GetTransactionsResponse")]
        ExpenseTracker.Model.Transaction[] GetTransactions();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ExpenseTrackerService/GetTransactions", ReplyAction="http://tempuri.org/ExpenseTrackerService/GetTransactionsResponse")]
        System.Threading.Tasks.Task<ExpenseTracker.Model.Transaction[]> GetTransactionsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ExpenseTrackerService/GetTransactionById", ReplyAction="http://tempuri.org/ExpenseTrackerService/GetTransactionByIdResponse")]
        ExpenseTracker.Model.Transaction GetTransactionById(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ExpenseTrackerService/GetTransactionById", ReplyAction="http://tempuri.org/ExpenseTrackerService/GetTransactionByIdResponse")]
        System.Threading.Tasks.Task<ExpenseTracker.Model.Transaction> GetTransactionByIdAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ExpenseTrackerService/AddTransaction", ReplyAction="http://tempuri.org/ExpenseTrackerService/AddTransactionResponse")]
        void AddTransaction(ExpenseTracker.Model.Transaction transaction);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ExpenseTrackerService/AddTransaction", ReplyAction="http://tempuri.org/ExpenseTrackerService/AddTransactionResponse")]
        System.Threading.Tasks.Task AddTransactionAsync(ExpenseTracker.Model.Transaction transaction);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ExpenseTrackerService/UpdateTransaction", ReplyAction="http://tempuri.org/ExpenseTrackerService/UpdateTransactionResponse")]
        void UpdateTransaction(ExpenseTracker.Model.Transaction transaction);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ExpenseTrackerService/UpdateTransaction", ReplyAction="http://tempuri.org/ExpenseTrackerService/UpdateTransactionResponse")]
        System.Threading.Tasks.Task UpdateTransactionAsync(ExpenseTracker.Model.Transaction transaction);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ExpenseTrackerService/DeleteTransactionById", ReplyAction="http://tempuri.org/ExpenseTrackerService/DeleteTransactionByIdResponse")]
        void DeleteTransactionById(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ExpenseTrackerService/DeleteTransactionById", ReplyAction="http://tempuri.org/ExpenseTrackerService/DeleteTransactionByIdResponse")]
        System.Threading.Tasks.Task DeleteTransactionByIdAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ExpenseTrackerService/GetAccounts", ReplyAction="http://tempuri.org/ExpenseTrackerService/GetAccountsResponse")]
        ExpenseTracker.Model.Account[] GetAccounts();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ExpenseTrackerService/GetAccounts", ReplyAction="http://tempuri.org/ExpenseTrackerService/GetAccountsResponse")]
        System.Threading.Tasks.Task<ExpenseTracker.Model.Account[]> GetAccountsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ExpenseTrackerService/GetAccountById", ReplyAction="http://tempuri.org/ExpenseTrackerService/GetAccountByIdResponse")]
        ExpenseTracker.Model.Account GetAccountById(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ExpenseTrackerService/GetAccountById", ReplyAction="http://tempuri.org/ExpenseTrackerService/GetAccountByIdResponse")]
        System.Threading.Tasks.Task<ExpenseTracker.Model.Account> GetAccountByIdAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ExpenseTrackerService/AddAccount", ReplyAction="http://tempuri.org/ExpenseTrackerService/AddAccountResponse")]
        void AddAccount(ExpenseTracker.Model.Account account);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ExpenseTrackerService/AddAccount", ReplyAction="http://tempuri.org/ExpenseTrackerService/AddAccountResponse")]
        System.Threading.Tasks.Task AddAccountAsync(ExpenseTracker.Model.Account account);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ExpenseTrackerService/UpdateAccount", ReplyAction="http://tempuri.org/ExpenseTrackerService/UpdateAccountResponse")]
        void UpdateAccount(ExpenseTracker.Model.Account account);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ExpenseTrackerService/UpdateAccount", ReplyAction="http://tempuri.org/ExpenseTrackerService/UpdateAccountResponse")]
        System.Threading.Tasks.Task UpdateAccountAsync(ExpenseTracker.Model.Account account);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ExpenseTrackerService/DeleteAccountById", ReplyAction="http://tempuri.org/ExpenseTrackerService/DeleteAccountByIdResponse")]
        void DeleteAccountById(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ExpenseTrackerService/DeleteAccountById", ReplyAction="http://tempuri.org/ExpenseTrackerService/DeleteAccountByIdResponse")]
        System.Threading.Tasks.Task DeleteAccountByIdAsync(int id);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ExpenseTrackerServiceChannel : ExpenseTracker.Server.MVC.ExpensesService.ExpenseTrackerService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ExpenseTrackerServiceClient : System.ServiceModel.ClientBase<ExpenseTracker.Server.MVC.ExpensesService.ExpenseTrackerService>, ExpenseTracker.Server.MVC.ExpensesService.ExpenseTrackerService {
        
        public ExpenseTrackerServiceClient() {
        }
        
        public ExpenseTrackerServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public ExpenseTrackerServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ExpenseTrackerServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ExpenseTrackerServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public ExpenseTracker.Model.CategoryType[] GetCategoryTypes() {
            return base.Channel.GetCategoryTypes();
        }
        
        public System.Threading.Tasks.Task<ExpenseTracker.Model.CategoryType[]> GetCategoryTypesAsync() {
            return base.Channel.GetCategoryTypesAsync();
        }
        
        public ExpenseTracker.Model.CategoryType GetCategoryTypeById(int id) {
            return base.Channel.GetCategoryTypeById(id);
        }
        
        public System.Threading.Tasks.Task<ExpenseTracker.Model.CategoryType> GetCategoryTypeByIdAsync(int id) {
            return base.Channel.GetCategoryTypeByIdAsync(id);
        }
        
        public void AddCategoryType(ExpenseTracker.Model.CategoryType categoryType) {
            base.Channel.AddCategoryType(categoryType);
        }
        
        public System.Threading.Tasks.Task AddCategoryTypeAsync(ExpenseTracker.Model.CategoryType categoryType) {
            return base.Channel.AddCategoryTypeAsync(categoryType);
        }
        
        public void UpdateCategoryType(ExpenseTracker.Model.CategoryType categoryType) {
            base.Channel.UpdateCategoryType(categoryType);
        }
        
        public System.Threading.Tasks.Task UpdateCategoryTypeAsync(ExpenseTracker.Model.CategoryType categoryType) {
            return base.Channel.UpdateCategoryTypeAsync(categoryType);
        }
        
        public void DeleteCategoryTypeById(int id) {
            base.Channel.DeleteCategoryTypeById(id);
        }
        
        public System.Threading.Tasks.Task DeleteCategoryTypeByIdAsync(int id) {
            return base.Channel.DeleteCategoryTypeByIdAsync(id);
        }
        
        public ExpenseTracker.Model.Category[] GetCategories() {
            return base.Channel.GetCategories();
        }
        
        public System.Threading.Tasks.Task<ExpenseTracker.Model.Category[]> GetCategoriesAsync() {
            return base.Channel.GetCategoriesAsync();
        }
        
        public ExpenseTracker.Model.Category GetCategoryById(int id) {
            return base.Channel.GetCategoryById(id);
        }
        
        public System.Threading.Tasks.Task<ExpenseTracker.Model.Category> GetCategoryByIdAsync(int id) {
            return base.Channel.GetCategoryByIdAsync(id);
        }
        
        public void AddCategory(ExpenseTracker.Model.Category category) {
            base.Channel.AddCategory(category);
        }
        
        public System.Threading.Tasks.Task AddCategoryAsync(ExpenseTracker.Model.Category category) {
            return base.Channel.AddCategoryAsync(category);
        }
        
        public void UpdateCategory(ExpenseTracker.Model.Category category) {
            base.Channel.UpdateCategory(category);
        }
        
        public System.Threading.Tasks.Task UpdateCategoryAsync(ExpenseTracker.Model.Category category) {
            return base.Channel.UpdateCategoryAsync(category);
        }
        
        public void DeleteCategoryById(int id) {
            base.Channel.DeleteCategoryById(id);
        }
        
        public System.Threading.Tasks.Task DeleteCategoryByIdAsync(int id) {
            return base.Channel.DeleteCategoryByIdAsync(id);
        }
        
        public ExpenseTracker.Model.Transaction[] GetTransactions() {
            return base.Channel.GetTransactions();
        }
        
        public System.Threading.Tasks.Task<ExpenseTracker.Model.Transaction[]> GetTransactionsAsync() {
            return base.Channel.GetTransactionsAsync();
        }
        
        public ExpenseTracker.Model.Transaction GetTransactionById(int id) {
            return base.Channel.GetTransactionById(id);
        }
        
        public System.Threading.Tasks.Task<ExpenseTracker.Model.Transaction> GetTransactionByIdAsync(int id) {
            return base.Channel.GetTransactionByIdAsync(id);
        }
        
        public void AddTransaction(ExpenseTracker.Model.Transaction transaction) {
            base.Channel.AddTransaction(transaction);
        }
        
        public System.Threading.Tasks.Task AddTransactionAsync(ExpenseTracker.Model.Transaction transaction) {
            return base.Channel.AddTransactionAsync(transaction);
        }
        
        public void UpdateTransaction(ExpenseTracker.Model.Transaction transaction) {
            base.Channel.UpdateTransaction(transaction);
        }
        
        public System.Threading.Tasks.Task UpdateTransactionAsync(ExpenseTracker.Model.Transaction transaction) {
            return base.Channel.UpdateTransactionAsync(transaction);
        }
        
        public void DeleteTransactionById(int id) {
            base.Channel.DeleteTransactionById(id);
        }
        
        public System.Threading.Tasks.Task DeleteTransactionByIdAsync(int id) {
            return base.Channel.DeleteTransactionByIdAsync(id);
        }
        
        public ExpenseTracker.Model.Account[] GetAccounts() {
            return base.Channel.GetAccounts();
        }
        
        public System.Threading.Tasks.Task<ExpenseTracker.Model.Account[]> GetAccountsAsync() {
            return base.Channel.GetAccountsAsync();
        }
        
        public ExpenseTracker.Model.Account GetAccountById(int id) {
            return base.Channel.GetAccountById(id);
        }
        
        public System.Threading.Tasks.Task<ExpenseTracker.Model.Account> GetAccountByIdAsync(int id) {
            return base.Channel.GetAccountByIdAsync(id);
        }
        
        public void AddAccount(ExpenseTracker.Model.Account account) {
            base.Channel.AddAccount(account);
        }
        
        public System.Threading.Tasks.Task AddAccountAsync(ExpenseTracker.Model.Account account) {
            return base.Channel.AddAccountAsync(account);
        }
        
        public void UpdateAccount(ExpenseTracker.Model.Account account) {
            base.Channel.UpdateAccount(account);
        }
        
        public System.Threading.Tasks.Task UpdateAccountAsync(ExpenseTracker.Model.Account account) {
            return base.Channel.UpdateAccountAsync(account);
        }
        
        public void DeleteAccountById(int id) {
            base.Channel.DeleteAccountById(id);
        }
        
        public System.Threading.Tasks.Task DeleteAccountByIdAsync(int id) {
            return base.Channel.DeleteAccountByIdAsync(id);
        }
    }
}
